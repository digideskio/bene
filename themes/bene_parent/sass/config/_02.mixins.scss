@mixin font-style($style) {
  @if $style == 'italic' { // Italic Light
    font-family: 'Open Sans', sans-serif; // in case css variables are not supported
    font-family: var(--font-family-primary);
    font-style: italic;
    font-weight: 300;
  } @else if $style == 'regular' {
    font-family: 'Open Sans', sans-serif; // in case css variables are not supported
    font-family: var(--font-family-primary);
    font-weight: 400;
    font-style: normal;
  } @else if $style == 'semibold' {
    font-family: 'Open Sans', sans-serif; // in case css variables are not supported
    font-family: var(--font-family-primary);
    font-weight: 600;
    font-style: normal;
  } @else if $style == 'bold' {
    font-family: 'Open Sans', sans-serif; // in case css variables are not supported
    font-family: var(--font-family-primary);
    font-weight: 700;
    font-style: normal;
  } @else if $style == 'black' {
    font-family: 'Open Sans', sans-serif; // in case css variables are not supported
    font-family: var(--font-family-primary);
    font-weight: 900;
    font-style: normal;
  } @else if $style == 'light' { // Light is the default font
    font-family: 'Open Sans', sans-serif; // in case css variables are not supported
    font-family: var(--font-family-primary);
    font-weight: 300;
    font-style: normal;
  }
}

// Makes an element visually hidden, but accessible.
// @see http://snook.ca/archives/html_and_css/hiding-content-for-accessibility
@mixin element-invisible {
  position: absolute !important;
  height: 1px;
  width: 1px;
  overflow: hidden;
  clip: rect(1px, 1px, 1px, 1px);
}

/* Turns off the element-invisible effect. */
@mixin element-invisible-off {
  position: static !important;
  clip: auto;
  height: auto;
  width: auto;
  overflow: auto;
}

/* Makes an element visually hidden by default, but visible when focused. */
@mixin element-focusable {
  @include element-invisible;
  &:active,
  &:focus {
    @include element-invisible-off;
  }
}

/* Undo clearfix. Apply to .clearfix:after */
@mixin undo-clearfix {
  content: "";
  display: inline-block;
  height: auto;
  clear: none;
  display: none;
}

/* Ensure parent has position: relative; */
@mixin centerer {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

/* Default transition */
@mixin default-transition {
  @include transition(color 0.3s linear, background-color 0.3s linear);
}

/* All transition */
@mixin all-transition {
  @include transition(all 0.3s linear);
}

/* Buttons */
@mixin button {
  @include transition(background-color 0.3s linear,color 0.3s linear);
  border-radius: rem(3);
  font-weight: 800;
  display: inline-block;
  font-size: rem(16);
  letter-spacing: 0.1rem;
  line-height: 1;
  padding: rem(20) rem(30);
  position: relative;
  text-transform: uppercase;
}

@mixin thick_gradient($direction: to bottom, $color: white) {
  background-image: linear-gradient($direction,
    rgba($color, 1.0) 0%,
    rgba($color, 0.95) 10%,
    rgba($color, 0.9) 30%,
    rgba($color, 0.7) 60%,
    rgba($color, 0.3) 70%,
    rgba($color, 0.0) 90%
  );
  content: "";
  display: inline-block;
  height: 100%;
  overflow: hidden;
  position: absolute;
  top: 0;
  width: 100%;
}

@mixin thin_gradient($direction: to bottom, $color: white) {
  background-image: linear-gradient($direction,
    rgba($color, 1.0) 0%,
    rgba($color, 1.0) 5%,
    rgba($color, 0.7) 30%,
    rgba($color, 0.5) 50%,
    rgba($color, 0.4) 60%,
    rgba($color, 0.1) 75%,
    rgba($color, 0.0) 95%,
    rgba($color, 0.0) 100%
  );
  content: "";
  display: inline-block;
  height: 100%;
  overflow: hidden;
  position: absolute;
  top: 0;
  width: 100%;
}


// Important instructions for using this mixin:
//
// Sets a CSS variable and a fallback at the same time
//
// $property - the property name. For example background-color or font-size
//
// $bbv-value - these values can be found in _01.vars.css in the map $bene-buildup-variables
//              for example color-primary-first
//
// $var-value - this is a valid css variable name beginning with '--'
//   Make up a name for the var-value that will make it easy for developers
//   to find while debugging. (For example if you are using this variable
//   setting in a class called mobile-menu-toggle which contains a div which
//   contains a span and it is setting the background-color you might consider
//   calling it --mobile-menu-toggle-div-span-background-color. Be sure to
//   include the two dashes on the beginning because it must be a valid css
//   variable name.)
//
// To generate c-level variables run the script sass/gen_c_level_vars.sh and
// save the output in _05.cssvars.scss
//
// This mixin takes input like this
//   @include set-bbv-var(color, font-color-primary, --paragraph-feature-full-width-field-text-color);
// and produces output like this
//   color: bbv(font-color-primary);
//   color: var(--paragraph-feature-full-width-field-text-color);
@mixin set-bbv-var($property, $bbv-value, $var-value) {
  #{$property}: #{bbv($bbv-value)}; // in case css variables are not supported
  #{$property}: var($var-value);
}

// Same arguments as the mixin above plus
//
// $arg - this value is to hold any other arguments that come before the one that
//        holds the variable. For example the border width (rem(1)) and style (solid).
//
// This mixin is similar to the one above but takes input like this
//   @include set-bbv-with-arg-before-var(border, rem(1) solid, background-color-secondary, --block-bene-footer-social-links-a-border-color);
// and produces output like this
//   border: rem(1) solid bbv(background-color-secondary);
//   border: rem(1) solid var(--block-bene-footer-social-links-a-border-color);
@mixin set-bbv-with-arg-before-var($property, $arg, $bbv-value, $var-value) {
  #{$property}: $arg #{bbv($bbv-value)};  // in case css variables are not supported
  #{$property}: $arg var($var-value);
}
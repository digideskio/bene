<?php

/**
 * @file
 * Functions to support theming in the thinkbase theme.
 */

use Drupal\Core\Render\Markup;

/**
 * Implements hook_preprocess_HOOK() for html.html.twig.
 */
function ts_benefit_preprocess_html(array &$variables) {
  /* Add class to html tag */
  // $variables['html_attributes']->addClass('no-js');
  // Don't display the site name twice on the front page (and potentially
  // others)
  // @codingStandardsIgnoreStart
//  if (isset($variables['head_title_array']['title'])
//      && isset($variables['head_title_array']['name'])
//      && ($variables['head_title_array']['title'] ==
//          $variables['head_title_array']['name'])
//  ) {
//    $variables['head_title'] = $variables['head_title_array']['name'];
//  }
  // @codingStandardsIgnoreEnd
}

/**
 * Implements hook_page_attachments_alter().
 */
function ts_benefit_page_attachments_alter(array &$page) {
  // Tell IE to use latest rendering engine (not to use compatibility mode).
  /*$ie_edge = [
  '#type' => 'html_tag',
  '#tag' => 'meta',
  '#attributes' => [
  'http-equiv' => 'X-UA-Compatible',
  'content' => 'IE=edge',
  ],
  ];
  $page['#attached']['html_head'][] = [$ie_edge, 'ie_edge'];*/
}

/**
 * Implements hook_preprocess_page() for page.html.twig.
 */
function ts_benefit_preprocess_page(array &$variables) {

}
/**
 * Implements hook_preprocess_page_title() for page.html.twig.
 */
function ts_benefit_preprocess_page_title(&$variables) {
  // If the current route represents a user profile page,
  // replace the username in the title with the user's email address.
  $route_match = \Drupal::service('current_route_match');
  $parameters = $route_match->getParameters();

  /** @var \Drupal\user\Entity\User $user */
  $user = $parameters->get('user');
  if (!empty($user)) {
    $old_title = $variables['title']['#markup']->__toString();
    $new_title = '';

    $username = $user->getUsername();
    $email = $user->getEmail();

    if (!empty($email)) {
      $new_title = str_replace($username, $email, $old_title);
    }
  }

  if (!empty($new_title)) {
    $variables['title']['#markup'] = Markup::create($new_title);
  }
}

/**
 * Implements hook_theme_suggestions_page_alter().
 */
function ts_benefit_theme_suggestions_page_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_theme_suggestions_node_alter().
 */
function ts_benefit_theme_suggestions_node_alter(array &$suggestions, array $variables) {
  /*$node = $variables['elements']['#node'];

  if ($variables['elements']['#view_mode'] == "full") {

  }*/
}

/**
 * Implements hook_preprocess_HOOK() for Block document templates.
 */
function ts_benefit_preprocess_block(array &$variables) {

}

/**
 * Implements hook_theme_suggestions_field_alter().
 */
function ts_benefit_theme_suggestions_field_alter(array &$suggestions, array $variables) {
  /*$element = $variables['element'];
  $suggestions[] = 'field__' . $element['#view_mode'];
  $suggestions[] = 'field__' . $element['#view_mode'] . '__' . $element['#field_name'];*/
}

/**
 * Implements hook_theme_suggestions_field_alter().
 */
function ts_benefit_theme_suggestions_fieldset_alter(array &$suggestions, array $variables) {
  /*$element = $variables['element'];
  if (isset($element['#attributes']['class'])
  && in_array('form-composite', $element['#attributes']['class'])) {
  $suggestions[] = 'fieldset__form_composite';
  }*/
}

/**
 * Implements hook_preprocess_node().
 */
function ts_benefit_preprocess_node(array &$variables) {
  // Default to turning off byline/submitted.
  // $variables['display_submitted'] = FALSE;.
}

/**
 * Implements hook_theme_suggestions_views_view_alter().
 */
function ts_benefit_theme_suggestions_views_view_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_preprocess_form().
 */
function ts_benefit_preprocess_form(array &$variables) {
  // $variables['attributes']['novalidate'] = 'novalidate';.
}

/**
 * Implements hook_preprocess_select().
 */
function ts_benefit_preprocess_select(array &$variables) {
  // $variables['attributes']['class'][] = 'select-chosen';.
}

/**
 * Implements hook_preprocess_field().
 */
function ts_benefit_preprocess_field(array &$variables, $hook) {
  /*switch ($variables['element']['#field_name']) {
  }*/
}

/**
 * Implements hook_preprocess_details().
 */
function ts_benefit_preprocess_details(array &$variables) {
  /*$variables['attributes']['class'][] = 'details';
  $variables['summary_attributes']['class'] = 'summary';*/
}

/**
 * Implements hook_theme_suggestions_details_alter().
 */
function ts_benefit_theme_suggestions_details_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_preprocess_menu_local_task().
 */
function ts_benefit_preprocess_menu_local_task(array &$variables) {
  // $variables['element']['#link']['url']->setOption('attributes',
  // ['class'=>'rounded']);.
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for form templates.
 */
function ts_benefit_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  if (isset($variables['elements']['content']['#block_content'])) {
    array_splice($suggestions, 1, 0, 'block__bundle__' . $variables['elements']['content']['#block_content']->bundle());
  }
}
